import { OrbisDB } from '@useorbis/db-sdk';

export interface MetokenMetadata {
  address: string;  // User's wallet address
  token_name: string;
  token_symbol: string;
  stream_id?: string;  // Generated by OrbisDB
  controller?: string; // Generated by OrbisDB
  created_at?: Date;
}

const MODEL_NAME = 'metoken-metadata';

const schema = {
  type: 'object',
  required: ['address', 'token_name', 'token_symbol'],
  properties: {
    address: {
      type: 'string',
      title: 'Wallet Address',
      maxLength: 42,
    },
    token_name: {
      type: 'string',
      title: 'Token Name',
    },
    token_symbol: {
      type: 'string',
      title: 'Token Symbol',
    },
    stream_id: {
      type: 'string',
    },
    controller: {
      type: 'string',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
  },
};

const createMetokenMetadataModel = (db: OrbisDB) => {
  return {
    insert: async (data: MetokenMetadata) => {
      return db.insert(MODEL_NAME)
        .value(data)
        .run();
    },
    update: async (documentId: string, data: Partial<MetokenMetadata>) => {
      return db.update(documentId)
        .set(data)
        .run();
    },
    select: async () => {
      return db.select(MODEL_NAME).run();
    }
  };
};

export default createMetokenMetadataModel;
